<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>彭领的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.pengling.cc/"/>
  <updated>2017-07-26T08:01:19.000Z</updated>
  <id>http://www.pengling.cc/</id>
  
  <author>
    <name>彭领</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>shell 中的查找替换</title>
    <link href="http://www.pengling.cc/2017/07/26/shell-find-and-replace/"/>
    <id>http://www.pengling.cc/2017/07/26/shell-find-and-replace/</id>
    <published>2017-07-26T07:56:39.000Z</published>
    <updated>2017-07-26T08:01:19.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>用sed实现多文本内容替换</li>
</ul>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed -i <span class="string">'s/abc/ABC/g'</span> `grep -rl <span class="string">'abc'</span> /usr/local/`</div></pre></td></tr></table></figure>
<p>其中<code>grep -l</code>的作用是只显示文件路径 不显示其他内容 方便传递给sed</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;用sed实现多文本内容替换&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight clean&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td
    
    </summary>
    
      <category term="shell" scheme="http://www.pengling.cc/categories/shell/"/>
    
    
      <category term="shell" scheme="http://www.pengling.cc/tags/shell/"/>
    
      <category term="sed" scheme="http://www.pengling.cc/tags/sed/"/>
    
  </entry>
  
  <entry>
    <title>http 知识点总结</title>
    <link href="http://www.pengling.cc/2017/07/24/http-protocol/"/>
    <id>http://www.pengling.cc/2017/07/24/http-protocol/</id>
    <published>2017-07-24T10:20:57.000Z</published>
    <updated>2017-07-26T08:02:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><p>HTTP报文 由 <code>报文头部</code> 和 <code>报文主体</code> 组成，两者用CRLF（\r\n）分割<br>报文头部 包括 请求行（请求） 或 状态行（响应）、首部字段、和其他（例如cookie）<br>首部字段也是用CRLF分割</p>
<h1 id="常用错误码"><a href="#常用错误码" class="headerlink" title="常用错误码"></a>常用错误码</h1><ul>
<li>301 永久跳转</li>
<li>302 临时跳转</li>
<li>304 文件未修改</li>
<li>400 请求语法错误</li>
<li>402 请求未授权</li>
<li>403 禁止访问</li>
<li>503 服务不可用</li>
</ul>
<h1 id="长连接（keep-alive）"><a href="#长连接（keep-alive）" class="headerlink" title="长连接（keep-alive）"></a>长连接（keep-alive）</h1><p>TCP链接建立需要三次握手，传输完数据又需要四次握手，如果每传输一次数据就建立一个tcp链接那是十分浪费资源的，为了能更高效的利用tcp链接在HTTP/1.0 中提出了<code>Connection: keep-alive</code>（在HTTP/1.1中这是个默认选项，不在需要客户端显示发送，能否启用该功能取决于服务端设定）,作用是当一块数据发送完之后不会关闭链接，而是等待后续的tcp请求，注意这里是等待tcp而不是等待后续的http，因为即使用了keep-alive 一个tcp链接也是只能处理一个http的请求响应的。而keep-alive带出的一个问题是接收数据的一端（一般是浏览器）如何判断这个链接的数据已经发送完了。有两种办法 一种是服务端在这次请求中事先就告诉客户端内容的长度即设置 <code>Content-Length:</code>头，比如<code>Content-Length:100</code> 那么客户端在收到第一百个字节的时候（指报文主体长度）就关闭链接，另一种是下面介绍的<code>分块传输</code></p>
<h1 id="分块传输-Transfer-Encoding-chunked"><a href="#分块传输-Transfer-Encoding-chunked" class="headerlink" title="分块传输(Transfer-Encoding: chunked)"></a>分块传输(Transfer-Encoding: chunked)</h1><p>分块编码主要应用于如下场景，即要传输大量的数据，但是在请求在没有被处理完之前响应的长度是无法获得的，服务器无法预先知道<code>Content-Length</code>，这时候就可以在http头部设定<code>Transfer-Encoding: chunked</code> 告诉客户端我后面的数据是分块传输的，而每一块数据包括16进制的长度和真正的数据,而最后一个块必须是一个长度为0的块表示结束，客户端收到这个这个长度为0的块就可以发起<code>FIN</code>请求关闭链接了，更详细参见<a href="https://imququ.com/post/transfer-encoding-header-in-http.html" target="_blank" rel="external">这里</a></p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK<span class="symbol">\r</span><span class="symbol">\n</span></div><div class="line">Transfer-Encoding: chunked<span class="symbol">\r</span><span class="symbol">\n</span></div><div class="line"><span class="symbol">\r</span><span class="symbol">\n</span></div><div class="line"></div><div class="line">b<span class="symbol">\r</span><span class="symbol">\n</span></div><div class="line">01234567890<span class="symbol">\r</span><span class="symbol">\n</span></div><div class="line"></div><div class="line">5<span class="symbol">\r</span><span class="symbol">\n</span></div><div class="line">12345<span class="symbol">\r</span><span class="symbol">\n</span></div><div class="line"></div><div class="line">0<span class="symbol">\r</span><span class="symbol">\n</span></div><div class="line"><span class="symbol">\r</span><span class="symbol">\n</span></div></pre></td></tr></table></figure>
<h1 id="Cache-Control-缓存处理策略"><a href="#Cache-Control-缓存处理策略" class="headerlink" title="Cache-Control 缓存处理策略"></a>Cache-Control 缓存处理策略</h1><table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>代理服务器和客户端都可缓存</td>
</tr>
<tr>
<td>private</td>
<td>仅客户端可以缓存</td>
</tr>
<tr>
<td>no-cache</td>
<td>请求头时表示不要缓存服务器的内容直接请求源服务器，响应头时表示浏览器每次必须先与服务器确认返回的响应是否被更改，然后才能使用该响应来满足后续对同一个网址的请求。</td>
</tr>
<tr>
<td>no-store</td>
<td>所有内容都不会被缓存到缓存或 Internet 临时文件中</td>
</tr>
<tr>
<td>must-revalidation/proxy-revalidation</td>
<td>如果缓存的内容失效，请求必须发送到服务器/代理以进行重新验证</td>
</tr>
<tr>
<td>max-age=xxx</td>
<td>请求头时表示只接受age小于这个值的缓存， 响应头时表示缓存的内容将在 xxx 秒后失效, 这个选项只在HTTP 1.1可用, 并如果和Last-Modified一起使用时, 优先级较高</td>
</tr>
</tbody>
</table>
<h1 id="常用头部"><a href="#常用头部" class="headerlink" title="常用头部"></a>常用头部</h1><h2 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h2><ul>
<li>Connection ： close告诉服务端请求完不要保持这个链接直接关闭，keep-alive 告诉服务端请求完别关闭链接 还有后续请求。</li>
<li>If-Modified-Since：如果请求的对象在该头部指定的时间之后修改了，才执行请求的动作（比如返回对象），否则返回代码304，告诉浏览器该对象没有修改。例如：If-Modified-Since：Thu, 10 Apr 2008 09:14:42 GMT</li>
<li>If-None-Match：如果对象的 ETag 改变了，其实也就意味著对象也改变了，才执行请求的动作。</li>
</ul>
<h2 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h2><ul>
<li>Cache-Control 缓存处理策略</li>
<li>Content-Encoding 压缩方式gzip</li>
<li>Content-Length 响应长度</li>
<li>Content-Type 内容的类型 application/xml</li>
<li>Transfer-Encoding 传输编码方式 目前只有chunked</li>
<li>ETag 响应内容的签名</li>
</ul>
<h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><h2 id="csrf-跨站请求伪造-防范"><a href="#csrf-跨站请求伪造-防范" class="headerlink" title="csrf 跨站请求伪造  防范"></a>csrf 跨站请求伪造  防范</h2><ul>
<li>判断referer</li>
<li>表单中加入随机token，并且每次表单提交后变换token</li>
</ul>
<h2 id="xss-跨站脚本攻击-防范"><a href="#xss-跨站脚本攻击-防范" class="headerlink" title="xss 跨站脚本攻击 防范"></a>xss 跨站脚本攻击 防范</h2><ul>
<li>过滤html java用spring的 HtmlUtils.htmlEscape php 用 htmlspecialchars</li>
<li>必须输入html的地方 设置标签白名单，解析html重新整理。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;格式&quot;&gt;&lt;a href=&quot;#格式&quot; class=&quot;headerlink&quot; title=&quot;格式&quot;&gt;&lt;/a&gt;格式&lt;/h1&gt;&lt;p&gt;HTTP报文 由 &lt;code&gt;报文头部&lt;/code&gt; 和 &lt;code&gt;报文主体&lt;/code&gt; 组成，两者用CRLF（\r\n）分割&lt;br&gt;报
    
    </summary>
    
      <category term="网络" scheme="http://www.pengling.cc/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="http" scheme="http://www.pengling.cc/tags/http/"/>
    
      <category term="网络" scheme="http://www.pengling.cc/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>longest substring without repeat</title>
    <link href="http://www.pengling.cc/2017/07/21/longest-subtring-without-repeat/"/>
    <id>http://www.pengling.cc/2017/07/21/longest-subtring-without-repeat/</id>
    <published>2017-07-21T11:55:57.000Z</published>
    <updated>2017-07-21T13:21:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Given a string, find the length of the longest substring without repeating characters.</p>
<p>Examples:</p>
<p>Given “abcabcbb”, the answer is “abc”, which the length is 3.</p>
<p>Given “bbbbb”, the answer is “b”, with the length of 1.</p>
<p>Given “pwwkew”, the answer is “wke”, with the length of 3. Note that the answer must be a substring, “pwke” is a subsequence and not a substring.</p>
</blockquote>
<h2 id="获取一个字符串中无重复字符的最长字符串"><a href="#获取一个字符串中无重复字符的最长字符串" class="headerlink" title="获取一个字符串中无重复字符的最长字符串"></a>获取一个字符串中无重复字符的最长字符串</h2><pre><code>public class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashMap&lt;Character,Integer&gt; map = new HashMap&lt;&gt;();
        int max = 0;
        int j = 0;
        for(int i = 0;i&lt;s.length();i++){
            Character c = s.charAt(i);
            if(map.containsKey(c)){
                j = Math.max(map.get(c)+1,j);
            }
            map.put(c,i);
            max = Math.max(max,i-j+1);
        }
        return max;
    }
}
</code></pre><h1 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h1><p>‘fabcdaf’ 字符串从0开始编号<br>    可以想象手握一根线的两头在字符串间游走，不断去丈量寻找最大的长度，右手用<code>i</code>代表，左手用<code>j</code>去表示，<code>Hashmap</code>是我们的记账本，每个字母的位置我们都记录在本子上，同时<code>i</code>每走一步我们就算一次最大长度算法就是左右手间的距离也就是<code>i-j+1</code>（其实没有必要每次都算但是这样的代码最简洁），对于重复出现的字母我们只记录最新的。<br>    让<code>i</code>先往右走 即 <code>i++</code>，并把<code>i</code>碰到的字母和位置记录到本子中，重复这个过程，直到本子上第一次出现了重复的字母，我们看一下本子上这个字母的位置，比如<code>i</code>现在走到了<code>5</code>碰到了重复字母<code>a</code>，本子上记录的位置是<code>1</code>，这时候我们就要挪动左手了，因为两个手之间出现了重复的字符我们要把它跳过去，那把左手往哪挪呢？肯定是往右挪，挪到哪最合适呢？当然是紧挨着1号位的右手边二号位是最合适的，因此这时<code>j</code>的取值就变成了<code>map.get(c)+1</code>，好，到了最难理解的一步<code>Math.max</code>的作用，这时候它的作用还没发挥出来，我们接着让<code>i</code>往右走。<br>    此时的<code>j</code>停在了<code>2</code>号位,<code>i</code>走到了字符<code>f</code>,<code>i</code>又一次的从本子上发现了出现过的字母，又该动动你的左手了，往哪边挪？不能往左，因为往左会出现更多的重复（a的重复）只能往右或者原地不动，而因为<code>f</code>的位置比<code>a</code>还要靠左，那好看来原地不动是最好的选择，所以我们在<code>j</code>的取值上增加了一个max处理，就是防止左手又回到了一个错误的位置上。</p>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><blockquote>
<p>i 和 j 这两个指针是只能往右走的 不能走回头路，i负责探路，j负责跳过路上的坑。 </p>
</blockquote>
<h3 id="leetcode-链接"><a href="#leetcode-链接" class="headerlink" title="leetcode 链接"></a>leetcode 链接</h3><ul>
<li><a href="https://discuss.leetcode.com/topic/8232/11-line-simple-java-solution-o-n-with-explanation" target="_blank" rel="external">https://discuss.leetcode.com/topic/8232/11-line-simple-java-solution-o-n-with-explanation</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Given a string, find the length of the longest substring without repeating characters.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;p&gt;Given “abcabc
    
    </summary>
    
      <category term="算法" scheme="http://www.pengling.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://www.pengling.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="http://www.pengling.cc/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="leetcode" scheme="http://www.pengling.cc/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Yii 学习笔记: 安装</title>
    <link href="http://www.pengling.cc/2015/05/27/YII-start-install/"/>
    <id>http://www.pengling.cc/2015/05/27/YII-start-install/</id>
    <published>2015-05-27T02:40:33.000Z</published>
    <updated>2017-07-21T00:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>#参考<br><a href="http://www.yiichina.com/doc/guide/2.0/start-installation" target="_blank" rel="external">Yii中文文档</a><br><a href="http://xrong.net/2014/09/20/%E5%9B%BD%E5%86%85%E4%BD%BF%E7%94%A8composer%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/" target="_blank" rel="external">配置composer</a></p>
<p>composer是php的包管理工具 yii的项目也可通过它去初始化 由于要获取github上的项目 在国内不配置代理或镜像很卡 </p>
<p>为了愉快的敲代码 首先就先把这个composer干掉<br>我用的是window下的git bash 这个里面集成了很多linux下的shell命令 简单方便<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ composer<span class="built_in"> config </span>-l -g | grep home</div><div class="line">[home] C:/Users/Administrator/AppData/Roaming/Composer</div></pre></td></tr></table></figure></p>
<p>-l是list的缩写 -g是global的缩写 即列出全局的配置信息 然后我们筛选得到home这一项 这个就是composer的工作目录 配置文件 以及全局的安装都会存在这里</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ composer<span class="built_in"> config </span>-e -g</div></pre></td></tr></table></figure>
<p>这条命令将会用户编辑器打开全局的配置文件<br>将配置文件修改为<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    </div><div class="line">	<span class="attr">"config"</span>: &#123;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">"repositories"</span>: [</div><div class="line">        	&#123;<span class="attr">"type"</span>: <span class="string">"composer"</span>, <span class="attr">"url"</span>: <span class="string">"http://pkg.phpcomposer.com/repo/packagist/"</span>&#125;,</div><div class="line">        	&#123;<span class="attr">"packagist"</span>: <span class="literal">false</span>&#125;</div><div class="line">    	]</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>开始安装第一个全局的composer插件 composer-asset-plugin 这个插件用于管理一些前台包 如css js  框架等</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ composer <span class="meta">global</span> <span class="meta">require</span> <span class="string">"fxp/composer-asset-plugin:~1.0.0"</span></div></pre></td></tr></table></figure>
<p>~号的意思是 大于1.0版本但小于2.0版本的软件包</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#参考&lt;br&gt;&lt;a href=&quot;http://www.yiichina.com/doc/guide/2.0/start-installation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yii中文文档&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://x
    
    </summary>
    
      <category term="php" scheme="http://www.pengling.cc/categories/php/"/>
    
    
      <category term="Yii" scheme="http://www.pengling.cc/tags/Yii/"/>
    
  </entry>
  
  <entry>
    <title>window下查看 apache 配置文件错误</title>
    <link href="http://www.pengling.cc/2015/05/07/apache-config-error/"/>
    <id>http://www.pengling.cc/2015/05/07/apache-config-error/</id>
    <published>2015-05-07T07:20:44.000Z</published>
    <updated>2017-07-21T00:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Windows下修改Apache配置文件 导致服务没法启动了 但是从错误日志里却看不到错误信息 后百度到是可以从dos启动Apache然后看报错信息<br>具体命令如下<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D:<span class="symbol">\w</span>amp<span class="symbol">\b</span>in<span class="symbol">\a</span>pache<span class="symbol">\a</span>pache2.4.9&gt;bin<span class="symbol">\h</span>ttpd.exe -w -k restart -n wampapache64</div></pre></td></tr></table></figure></p>
<ul>
<li>-w 的作用是在控制台中输出错误信息</li>
<li>-k restart 是一体的 表示重启apache</li>
<li>-n 是Apache服务的名字这个是个要注意的地方 如果不填他会按默认的名字去启动 但是很多集成环境他已经改了服务的名字了 这个可以从计算机管理里的服务中看到真实的名字</li>
</ul>
<p>更具体的说明 可以结合-h查看</p>
<p>终于看到报错信息了<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AH00526: Syntax <span class="builtin-name">error</span> on line 28 of D:/wamp/bin/apache/apache2.4.9/conf/extra/httpd-vhosts.conf:</div><div class="line">RewriteBase: only valid <span class="keyword">in</span> per-directory<span class="built_in"> config </span>files<span class="built_in"></span></div><div class="line">Note the errors <span class="keyword">or</span> messages above, <span class="keyword">and</span> press the &lt;ESC&gt; key <span class="keyword">to</span> exit.  0<span class="built_in">..</span><span class="built_in">..</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Windows下修改Apache配置文件 导致服务没法启动了 但是从错误日志里却看不到错误信息 后百度到是可以从dos启动Apache然后看报错信息&lt;br&gt;具体命令如下&lt;br&gt;&lt;figure class=&quot;highlight taggerscript&quot;&gt;&lt;table&gt;&lt;t
    
    </summary>
    
      <category term="apache" scheme="http://www.pengling.cc/categories/apache/"/>
    
    
      <category term="apache" scheme="http://www.pengling.cc/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title>openssl生成密钥 php和java 相互加密解密</title>
    <link href="http://www.pengling.cc/2015/04/14/openssl-rsa-php-java/"/>
    <id>http://www.pengling.cc/2015/04/14/openssl-rsa-php-java/</id>
    <published>2015-04-14T06:25:02.000Z</published>
    <updated>2017-07-21T00:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料</p>
<p>【1】<a href="http://blog.csdn.net/chaijunkun/article/details/7275632" target="_blank" rel="external">http://blog.csdn.net/chaijunkun/article/details/7275632</a><br>【2】<a href="http://blog.csdn.net/centralperk/article/details/8538697" target="_blank" rel="external">http://blog.csdn.net/centralperk/article/details/8538697</a><br>【3】<a href="http://blog.csdn.net/as3luyuan123/article/details/16105435" target="_blank" rel="external">http://blog.csdn.net/as3luyuan123/article/details/16105435</a><br>【4】<a href="http://blog.jobbole.com/42699/" target="_blank" rel="external">http://blog.jobbole.com/42699/</a></p>
<p>研究了一个星期 太多各种专业概念 感觉还是云里雾里  哪里理解的不对还望高手指正</p>
<p>openssl 是Linux下的一个工具合集是对各自解密协议的具体实现 可以用它来生成密钥 转换密钥格式等，命令的具体用法可参见<a href="https://www.openssl.org/docs/apps/openssl.html" target="_blank" rel="external">官方文档</a><br>rsa 是一种算法<br>pkcs 是一堆协议的集合 定义了各种规范 如密钥文件的语法格式等 其中pkcs#8 定义了私钥文件的语法格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">openssl genrsa -out private.pem 1024 #调用openssl下的genrsa工具生成一个私钥 这个1024是二进制的长度 换算成字节是128 </div><div class="line"></div><div class="line">openssl rsa -in private.pem -out public.pem -pubout #根据上面生成的私钥生成一个公钥 pubout的作用是告诉程序我们要生成的是公钥 默认这个命令是生成私钥的</div><div class="line"></div><div class="line">openssl pkcs8 -in private.pem -out private_pkcs8.pem -topk8 -nocrypt #将私钥转换成pkcs8格式 方便java调用  具体参数解释见[官方文档](https://www.openssl.org/docs/apps/pkcs8.html)吧</div></pre></td></tr></table></figure>
<p>从资料【1】看 默认格式的私钥文件 在java中也是可以使用的 但要做处理 而pkcs#8格式的文件在php 和java中都可直接使用 不需处理 为了方便我还是把密钥转成了pkcs#8</p>
<p>通过上面的命令我们就生成了 一对密钥 private_pkcs8.pem 和 public.pem</p>
<p>下面直接上php和java的代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">$cipher = <span class="keyword">new</span> Cipher(<span class="string">"private_pkcs8.pem"</span>,<span class="string">"public.pem"</span>);</div><div class="line">$en_out = $cipher-&gt;encrypt_by_public_key(str_repeat(<span class="string">'w'</span>,<span class="number">118</span>));</div><div class="line">$de_out = $cipher-&gt;decrypt_by_private_key($en_out);</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cipher</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> $private_key;</div><div class="line">    <span class="keyword">private</span> $public_key;</div><div class="line">    <span class="keyword">const</span> ENCRYPT_MAX_LENGTH = <span class="number">117</span>;<span class="comment">/*明文的分块区间*/</span></div><div class="line">    <span class="keyword">const</span> DECRYPT_MAX_LENGTH = <span class="number">128</span>;<span class="comment">/*密文的分块区间*/</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> string $private_key_path 私钥存放路径</div><div class="line">     * <span class="doctag">@param</span> string $public_key_path 公钥存放路径</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($private_key_path=<span class="string">''</span>,$public_key_path=<span class="string">''</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>($private_key_path &amp;&amp; file_exists($private_key_path))&#123;</div><div class="line">            $private_key_str = file_get_contents($private_key_path);</div><div class="line">            <span class="keyword">$this</span>-&gt;private_key = openssl_get_privatekey($private_key_str);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>($public_key_path &amp;&amp; file_exists($public_key_path))&#123;</div><div class="line">            $public_key_str = file_get_contents($public_key_path);</div><div class="line">            <span class="keyword">$this</span>-&gt;public_key = openssl_get_publickey($public_key_str);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">encrypt_by_public_key</span><span class="params">($plain_txt)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;public_key)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"public key not found"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        $data_length = strlen($plain_txt);</div><div class="line">        $off = <span class="number">0</span>;</div><div class="line">        $encrypt_data = <span class="string">''</span>;</div><div class="line">        <span class="keyword">while</span>($data_length - $off &gt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">if</span>($data_length - $off &gt; <span class="keyword">$this</span>::ENCRYPT_MAX_LENGTH)&#123;</div><div class="line">                $tmp = substr($plain_txt,$off,<span class="keyword">$this</span>::ENCRYPT_MAX_LENGTH);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                $tmp = substr($plain_txt,$off);</div><div class="line">            &#125;</div><div class="line">            openssl_public_encrypt($tmp,$encrypt_tmp,<span class="keyword">$this</span>-&gt;public_key);</div><div class="line">            $off += <span class="keyword">$this</span>::ENCRYPT_MAX_LENGTH;</div><div class="line">            $encrypt_data .= $encrypt_tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> chunk_split(base64_encode($encrypt_data));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">decrypt_by_private_key</span><span class="params">($cipher_txt)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;private_key)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"private key not found"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        $cipher_txt = base64_decode($cipher_txt);</div><div class="line">        $data_length = strlen($cipher_txt);</div><div class="line">        $off = <span class="number">0</span>;</div><div class="line">        $decrypt_data = <span class="string">''</span>;</div><div class="line">        <span class="keyword">while</span>($data_length - $off &gt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">if</span>($data_length - $off &gt; <span class="keyword">$this</span>::DECRYPT_MAX_LENGTH)&#123;</div><div class="line">                $tmp = substr($cipher_txt,$off,<span class="keyword">$this</span>::DECRYPT_MAX_LENGTH);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                $tmp = substr($cipher_txt,$off);</div><div class="line">            &#125;</div><div class="line">            openssl_private_decrypt($tmp,$decrypt_tmp,<span class="keyword">$this</span>-&gt;private_key);</div><div class="line">            $off += <span class="keyword">$this</span>::DECRYPT_MAX_LENGTH;</div><div class="line">            $decrypt_data .= $decrypt_tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $decrypt_data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> rsa;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.security.*;</div><div class="line"><span class="keyword">import</span> java.security.interfaces.RSAPrivateKey;</div><div class="line"><span class="keyword">import</span> java.security.interfaces.RSAPublicKey;</div><div class="line"><span class="keyword">import</span> java.security.spec.InvalidKeySpecException;</div><div class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</div><div class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</div><div class="line"><span class="keyword">import</span> javax.crypto.Cipher;</div><div class="line"><span class="keyword">import</span> jdk.nashorn.internal.codegen.CompilerConstants;</div><div class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;</div><div class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rsahelper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 私钥 </div><div class="line">     */  </div><div class="line">    <span class="keyword">public</span> RSAPrivateKey privateKey;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 公钥 </div><div class="line">     */  </div><div class="line">    <span class="keyword">public</span> RSAPublicKey publicKey;  </div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 最大明文长度</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ENCRYPT_BLOCK  = <span class="number">117</span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 最大密文长度</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_DECRYPT_BLOCK  = <span class="number">128</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Rsahelper rsahelper = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> args the command line arguments</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"></div><div class="line">       String plaintxt = <span class="string">""</span>;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">118</span>; i++) &#123;<span class="comment">//超过117后会被分段</span></div><div class="line">            plaintxt += <span class="string">"w"</span>;</div><div class="line">       &#125;</div><div class="line">       Rsahelper rsahelper = Rsahelper.getInstance(<span class="string">"private_pkcs8.pem"</span>, <span class="string">"public.pem"</span>);</div><div class="line">       String ripherdata = rsahelper.encrypt(plaintxt);</div><div class="line">       System.out.println(ripherdata);</div><div class="line">      </div><div class="line">       String pliandata = rsahelper.decrypt(ripherdata);</div><div class="line">       System.out.println(pliandata);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Rsahelper</span><span class="params">(String private_path,String public_path)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        File privatefile = <span class="keyword">new</span> File(private_path);</div><div class="line">        <span class="keyword">if</span>(privatefile.exists())&#123;</div><div class="line">            FileInputStream private_stream = <span class="keyword">new</span> FileInputStream(privatefile);</div><div class="line">            <span class="keyword">this</span>.loadPrivateKey(private_stream);</div><div class="line">        &#125;</div><div class="line">        File publicfile = <span class="keyword">new</span> File(public_path);</div><div class="line">        <span class="keyword">if</span>(publicfile.exists())&#123;</div><div class="line">            FileInputStream public_stream = <span class="keyword">new</span> FileInputStream(publicfile);</div><div class="line">            <span class="keyword">this</span>.loadPublicKey(public_stream);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Rsahelper <span class="title">getInstance</span><span class="params">(String private_path,String public_path)</span>  <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        <span class="keyword">if</span>(rsahelper == <span class="keyword">null</span>)&#123;</div><div class="line">            rsahelper = <span class="keyword">new</span> Rsahelper(private_path,public_path);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> rsahelper;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 从文件中输入流中加载公钥 </div><div class="line">     * <span class="doctag">@param</span> in 公钥输入流 </div><div class="line">     * <span class="doctag">@throws</span> Exception 加载公钥时产生的异常 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadPublicKey</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> Exception</span>&#123;  </div><div class="line">        </div><div class="line">        BufferedReader br= <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));  </div><div class="line">        String readLine= <span class="keyword">null</span>;  </div><div class="line">        StringBuilder sb= <span class="keyword">new</span> StringBuilder();  </div><div class="line">        <span class="keyword">while</span>((readLine= br.readLine())!=<span class="keyword">null</span>)&#123;  </div><div class="line">            <span class="keyword">if</span>(readLine.charAt(<span class="number">0</span>)==<span class="string">'-'</span>)&#123;  </div><div class="line">                <span class="keyword">continue</span>;  </div><div class="line">            &#125;<span class="keyword">else</span>&#123;  </div><div class="line">                sb.append(readLine);  </div><div class="line">                sb.append(<span class="string">'\r'</span>);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        loadPublicKey(sb.toString());  </div><div class="line">       </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 从字符串中加载公钥 </div><div class="line">     * <span class="doctag">@param</span> publicKeyStr 公钥数据字符串 </div><div class="line">     * <span class="doctag">@throws</span> Exception 加载公钥时产生的异常 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadPublicKey</span><span class="params">(String publicKeyStr)</span> <span class="keyword">throws</span> Exception</span>&#123;  </div><div class="line">      </div><div class="line">            BASE64Decoder base64Decoder= <span class="keyword">new</span> BASE64Decoder();  </div><div class="line">            <span class="keyword">byte</span>[] buffer= base64Decoder.decodeBuffer(publicKeyStr);  </div><div class="line">            KeyFactory keyFactory= KeyFactory.getInstance(<span class="string">"RSA"</span>);  </div><div class="line">            X509EncodedKeySpec keySpec= <span class="keyword">new</span> X509EncodedKeySpec(buffer);  </div><div class="line">            <span class="keyword">this</span>.publicKey= (RSAPublicKey) keyFactory.generatePublic(keySpec);  </div><div class="line">       </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 从文件中加载私钥 </div><div class="line">     * <span class="doctag">@param</span> keyFileName 私钥文件名 </div><div class="line">     * <span class="doctag">@return</span> 是否成功 </div><div class="line">     * <span class="doctag">@throws</span> Exception  </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadPrivateKey</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> Exception</span>&#123;  </div><div class="line">        </div><div class="line">        BufferedReader br= <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));  </div><div class="line">        String readLine= <span class="keyword">null</span>;  </div><div class="line">        StringBuilder sb= <span class="keyword">new</span> StringBuilder();  </div><div class="line">        <span class="keyword">while</span>((readLine= br.readLine())!=<span class="keyword">null</span>)&#123;  </div><div class="line">            <span class="keyword">if</span>(readLine.charAt(<span class="number">0</span>)==<span class="string">'-'</span>)&#123;  </div><div class="line">                <span class="keyword">continue</span>;  </div><div class="line">            &#125;<span class="keyword">else</span>&#123;  </div><div class="line">                sb.append(readLine);  </div><div class="line">                sb.append(<span class="string">'\r'</span>);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        loadPrivateKey(sb.toString());  </div><div class="line">       </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadPrivateKey</span><span class="params">(String privateKeyStr)</span> <span class="keyword">throws</span> Exception</span>&#123;  </div><div class="line">       </div><div class="line">        BASE64Decoder base64Decoder= <span class="keyword">new</span> BASE64Decoder();  </div><div class="line">        <span class="keyword">byte</span>[] buffer= base64Decoder.decodeBuffer(privateKeyStr);  </div><div class="line">        PKCS8EncodedKeySpec keySpec= <span class="keyword">new</span> PKCS8EncodedKeySpec(buffer);  </div><div class="line">        KeyFactory keyFactory= KeyFactory.getInstance(<span class="string">"RSA"</span>);  </div><div class="line">        <span class="keyword">this</span>.privateKey= (RSAPrivateKey) keyFactory.generatePrivate(keySpec);  </div><div class="line">      </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 加密过程 </div><div class="line">     * <span class="doctag">@param</span> publicKey 公钥 </div><div class="line">     * <span class="doctag">@param</span> plainTextData 明文数据 </div><div class="line">     * <span class="doctag">@return</span> </div><div class="line">     * <span class="doctag">@throws</span> Exception 加密过程中的异常信息 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encrypt</span><span class="params">(String plainText)</span> <span class="keyword">throws</span> Exception</span>&#123;  </div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.publicKey== <span class="keyword">null</span>)&#123;  </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"加密公钥为空, 请设置"</span>);  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">byte</span>[] plainTextData = plainText.getBytes();</div><div class="line">        Cipher cipher= <span class="keyword">null</span>;  </div><div class="line">        cipher= Cipher.getInstance(<span class="string">"RSA"</span>);  </div><div class="line">        cipher.init(Cipher.ENCRYPT_MODE, <span class="keyword">this</span>.publicKey);  </div><div class="line">        </div><div class="line">        <span class="keyword">int</span> inputlen = plainTextData.length;</div><div class="line">        ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">        <span class="keyword">int</span> offset = <span class="number">0</span>;</div><div class="line">        <span class="keyword">byte</span>[] cache,output=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span> (inputlen - offset &gt;<span class="number">0</span> ) &#123;</div><div class="line">           <span class="keyword">if</span>(inputlen - offset &gt; MAX_ENCRYPT_BLOCK )&#123;</div><div class="line">               cache= cipher.doFinal(plainTextData,offset,MAX_ENCRYPT_BLOCK); </div><div class="line">           &#125;<span class="keyword">else</span>&#123;</div><div class="line">               cache = cipher.doFinal(plainTextData,offset,inputlen - offset);</div><div class="line">           &#125;</div><div class="line">           out.write(cache, <span class="number">0</span>, cache.length);</div><div class="line">           offset += MAX_ENCRYPT_BLOCK;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        output = out.toByteArray();</div><div class="line">        out.close();</div><div class="line">        BASE64Encoder base64en = <span class="keyword">new</span> BASE64Encoder();</div><div class="line">        String encrypt_str = <span class="keyword">new</span> String( base64en.encode(output));</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> encrypt_str;  </div><div class="line">        </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 解密过程 </div><div class="line">     * <span class="doctag">@param</span> privateKey 私钥 </div><div class="line">     * <span class="doctag">@param</span> cipherData 密文数据 </div><div class="line">     * <span class="doctag">@return</span> 明文 </div><div class="line">     * <span class="doctag">@throws</span> Exception 解密过程中的异常信息 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decrypt</span><span class="params">(String cipherText )</span> <span class="keyword">throws</span> Exception</span>&#123;  </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.privateKey== <span class="keyword">null</span>)&#123;  </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"解密私钥为空, 请设置"</span>);  </div><div class="line">        &#125;  </div><div class="line">        BASE64Decoder base64Decoder= <span class="keyword">new</span> BASE64Decoder(); </div><div class="line">        <span class="keyword">byte</span>[] cipherData = base64Decoder.decodeBuffer(cipherText);</div><div class="line">        Cipher cipher= <span class="keyword">null</span>;  </div><div class="line">        cipher= Cipher.getInstance(<span class="string">"RSA"</span>);  </div><div class="line">        cipher.init(Cipher.DECRYPT_MODE, <span class="keyword">this</span>.privateKey);  </div><div class="line">        <span class="keyword">int</span> inputlen = cipherData.length;</div><div class="line">        ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">        <span class="keyword">int</span> offset = <span class="number">0</span>;</div><div class="line">        <span class="keyword">byte</span>[] cache,output=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span> (inputlen - offset &gt;<span class="number">0</span> ) &#123;</div><div class="line">           <span class="keyword">if</span>(inputlen - offset &gt; MAX_DECRYPT_BLOCK )&#123;</div><div class="line">               cache= cipher.doFinal(cipherData,offset,MAX_DECRYPT_BLOCK); </div><div class="line">           &#125;<span class="keyword">else</span>&#123;</div><div class="line">               cache = cipher.doFinal(cipherData,offset,inputlen - offset);</div><div class="line">           &#125;</div><div class="line">           out.write(cache, <span class="number">0</span>, cache.length);</div><div class="line">           offset += MAX_DECRYPT_BLOCK;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        output = out.toByteArray();</div><div class="line">        out.close();</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(output);  </div><div class="line">          </div><div class="line">    &#125;  </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考资料&lt;/p&gt;
&lt;p&gt;【1】&lt;a href=&quot;http://blog.csdn.net/chaijunkun/article/details/7275632&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/chai
    
    </summary>
    
      <category term="php" scheme="http://www.pengling.cc/categories/php/"/>
    
    
      <category term="rsa" scheme="http://www.pengling.cc/tags/rsa/"/>
    
      <category term="非对称加密" scheme="http://www.pengling.cc/tags/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>preg_replace \s 去不掉的空格</title>
    <link href="http://www.pengling.cc/2015/02/27/remove-space-by-preg-replace-s/"/>
    <id>http://www.pengling.cc/2015/02/27/remove-space-by-preg-replace-s/</id>
    <published>2015-02-27T09:42:11.000Z</published>
    <updated>2017-07-21T00:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>在做文章摘要功能时需要去除多余的空格，但是有一排空格却一直去不掉<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$str = <span class="string">'　　　　11111'</span>;</div><div class="line">$str = preg_replace(<span class="string">"/[\s]/"</span>,<span class="string">''</span>,$str);</div><div class="line"><span class="keyword">echo</span> $str;<span class="comment">#输出后发现还是有开头的空格</span></div></pre></td></tr></table></figure></p>
<p>后来一次偶然的尝试发现正则如果修改为/[\s]/u 就可以去除掉了</p>
<p>官方的解释是u修饰符修正了perl 正则与utf-8编码不兼容的模式 </p>
<p>一番折腾 我把那个特殊的空格字符转换成unicode编码后 他的编码是 \u3000<br>那么我直接用正则去匹配这个unicode的可以么 ？测试后也是可行的<br>写法如下 （以下纯属折腾以加深印象当然还是  /[\s]/u 最简单）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$str = <span class="string">'　　　　11111'</span>;</div><div class="line">$str = preg_replace(<span class="string">"/[\x&#123;3000&#125;]/u"</span>,<span class="string">''</span>,$str);</div><div class="line"><span class="keyword">echo</span> $str;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做文章摘要功能时需要去除多余的空格，但是有一排空格却一直去不掉&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=
    
    </summary>
    
      <category term="php" scheme="http://www.pengling.cc/categories/php/"/>
    
    
      <category term="php" scheme="http://www.pengling.cc/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>install linux server by source</title>
    <link href="http://www.pengling.cc/2015/01/16/install-linux-server-by-source/"/>
    <id>http://www.pengling.cc/2015/01/16/install-linux-server-by-source/</id>
    <published>2015-01-16T09:19:23.000Z</published>
    <updated>2017-07-21T00:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>安装第三方yum源<br>wget <a href="http://www.atomicorp.com/installers/atomic" target="_blank" rel="external">http://www.atomicorp.com/installers/atomic</a><br>sh ./atomic</p>
<p>安装依赖软件<br>yum -y install gcc gcc-c++ autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel libidn libidn-devel openssl openssl-devel  cmake bison  libmcrypt  libmcrypt-devel libtool libtool-ltdl libtool-ltdl-devel openldap openldap-devel</p>
<p>##nginx安装</p>
<p>下载<a href="http://sourceforge.net/projects/pcre/files/pcre/8.35/pcre-8.35.tar.gz/download" target="_blank" rel="external">pcre</a> 源码包并解压<br>tar -zxvf pcre-8.35.tar.gz</p>
<p>添加www用户<br>useradd -Mrs /sbin/nologin www</p>
<p>下载nginx<br>wget <a href="http://nginx.org/download/nginx-1.7.9.tar.gz" target="_blank" rel="external">http://nginx.org/download/nginx-1.7.9.tar.gz</a><br>tar -zxvf nginx-1.7.9.tar.gz<br>cd nginx-1.7.9</p>
<p>开始编译安装nginx<br> ./configure –user=www –group=www –prefix=/usr/local/nginx –with-http_stub_status_module –with-http_ssl_module –with-pcre=/usr/local/src/pcre-8.35  –with-http_realip_module<br> make &amp;&amp; make install</p>
<p> ##mysql5.5安装<br>useradd -Mrs /sbin/nologin mysql<br>unzip mysql-server-5.5.zip<br>cd mysql-server-5.5</p>
<p>cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DINSTALL_LIBDIR=/usr/lib -DSYSCONFDIR=/etc -DWITH_INNOBASE_STORAGE_ENGINE=1 -DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock -DMYSQL_TCP_PORT=3306 -DENABLED_LOCAL_INFILE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci</p>
<p>make<br>make install </p>
<p>cd /usr/local/mysql/</p>
<p>chown -R mysql:mysql .</p>
<p>scripts/mysql_install_db –user=mysql –basedir=/usr/local/mysql/ –datadir=/usr/local/mysql/data/</p>
<p>cp support-files/my-medium.cnf /etc/my.cnf</p>
<p>bin/mysqld_safe –user=mysql &amp;  启动mysql</p>
<p>##php 5.6.4 安装</p>
<p>cp -frp /usr/lib64/libldap* /usr/lib/<br>ldconfig -v<br>./configure –prefix=/usr/local/php –with-config-file-path=/usr/local/php/etc –with-mysql –with-mysqli=/usr/local/mysql/bin/mysql_config –with-iconv-dir=/usr/local –with-freetype-dir –with-jpeg-dir –with-png-dir –with-zlib –with-libxml-dir=/usr –enable-xml –disable-rpath –enable-discard-path –enable-safe-mode –enable-bcmath –enable-shmop –enable-sysvsem –enable-inline-optimization –with-curl –with-curlwrappers –enable-mbregex –enable-fastcgi –enable-fpm –enable-force-cgi-redirect –enable-mbstring –with-mcrypt –with-gd –enable-gd-native-ttf –with-openssl –with-mhash –enable-pcntl –enable-sockets –with-ldap –with-ldap-sasl –with-xmlrpc –enable-zip –enable-soap –without-pear –with-zlib –enable-pdo –with-pdo-mysql</p>
<p>注意这里的 –with-mysql 如果在编译mysql的时候 没有指定-DINSTALL_LIBDIR=/usr/lib 那么这里需要写成mysql的安装路径<br>如果报 Don’t know how to define struct flock on this system, set –enable-opcache=no 是由于没有找到mysql的库文件导致的<br>可以先运行ldconfig -v 命令 看看mysql的库文件有没有被加载进来 这个ldconfig就是用来加载动态链接库的<br>如果没有被加载进来  编辑 vi /etc/ld.so.conf.d/local.conf （这个local.conf 是随便起的 *.conf 的文件都会被加载）<br>在这个文件里加入你的库文件路径 例如 /usr/lib  保存退出后再次运行 ldconfig -v 注意不要重复引入 然后重新编译</p>
<p>make &amp;&amp; make install</p>
<p>##php memcached扩展安装<br> wget <a href="https://launchpad.net/libmemcached/1.0/1.0.18/+download/libmemcached-1.0.18.tar.gz" target="_blank" rel="external">https://launchpad.net/libmemcached/1.0/1.0.18/+download/libmemcached-1.0.18.tar.gz</a><br> tar -zxvf libmemcached-1.0.18.tar.gz<br> cd libmemcached-1.0.18<br> ./configure –with-memcached –prefix=/usr/local/libmemcached<br> make &amp;&amp; make install</p>
<p> wget <a href="http://pecl.php.net/get/memcached-2.2.0.tgz" target="_blank" rel="external">http://pecl.php.net/get/memcached-2.2.0.tgz</a><br> tar -zxvf memcached-2.2.0.tgz<br> cd memcached-2.2.0<br> /usr/local/php/bin/phpize<br> ./configure –enable-memcached –with-php-config=/usr/local/php/bin/php-config –with-libmemcached-dir=/usr/local/libmemcached<br> make &amp;&amp; make install</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装第三方yum源&lt;br&gt;wget &lt;a href=&quot;http://www.atomicorp.com/installers/atomic&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.atomicorp.com/installers
    
    </summary>
    
      <category term="linux" scheme="http://www.pengling.cc/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.pengling.cc/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>mysql主从 binlog-do-db 和 binlog-ignore-db</title>
    <link href="http://www.pengling.cc/2015/01/04/binlog-do-db-binlog-ignore-db/"/>
    <id>http://www.pengling.cc/2015/01/04/binlog-do-db-binlog-ignore-db/</id>
    <published>2015-01-04T06:27:11.000Z</published>
    <updated>2017-07-21T07:22:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>和 binlog-do-db，binlog-ignore-db对应的是replicate-do-db,replicate-ignore-db 前者对应的是master后者则是在从服务器上<br>检查的顺序是 </p>
<ol>
<li>如果没有设置任何的binlog-do-db 和 binlog-ignore-db则记录全部操作 如果有继续后面判断</li>
<li>是否有use任何库 如果没有则不记录日志 如果有继续后续判断</li>
<li>如果设置了 binlog-do-db 那么只记录binlog-do-db的数据库 其他的都不记录 如果没有设置任何binlog-do-db 才会去判断binlog-ignore-db</li>
<li>判断是否在binlog-ignore-db 如果有则不写入日志 如果没有则写入日志</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;和 binlog-do-db，binlog-ignore-db对应的是replicate-do-db,replicate-ignore-db 前者对应的是master后者则是在从服务器上&lt;br&gt;检查的顺序是 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果没有设置任何的binlog-do-
    
    </summary>
    
      <category term="mysql" scheme="http://www.pengling.cc/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://www.pengling.cc/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>源码安装mysql</title>
    <link href="http://www.pengling.cc/2014/12/30/install-mysql-from-source/"/>
    <id>http://www.pengling.cc/2014/12/30/install-mysql-from-source/</id>
    <published>2014-12-30T10:27:35.000Z</published>
    <updated>2017-07-21T00:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>mysql 源码包下载地址<br><a href="https://github.com/mysql/mysql-server" target="_blank" rel="external">https://github.com/mysql/mysql-server</a></p>
<p>参考文档<br><a href="http://dev.mysql.com/doc/refman/5.5/en/installing-source-distribution.html" target="_blank" rel="external">http://dev.mysql.com/doc/refman/5.5/en/installing-source-distribution.html</a></p>
<p>详细的步骤见官方文档即可 只记录几个关键步骤</p>
<p>安装依赖软件<br>yum  install ncurses-devel cmake </p>
<p>cmake时的主要编译参数<br>cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc -DWITH_INNOBASE_STORAGE_ENGINE=1 -DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock -DMYSQL_TCP_PORT=3306 -DENABLED_LOCAL_INFILE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci</p>
<p>默认的时候是没有innodb引擎的 所以加入 WITH_INNOBASE_STORAGE_ENGINE<br>ENABLED_LOCAL_INFILE 选项可以支持在客户端以load data 语句加载数据<br>WITH_PARTITION_STORAGE_ENGINE 加入对分区的支持</p>
<p>scripts/mysql_install_db –basedir=/usr/local/mysql –datadir=/usr/local/mysql/data –user=mysql</p>
<p>还有个注意的地方是如果开启了binlog 他默认会生产到MYSQL_DATADIR所在的目录 这个文件生产后属主可能不是mysql 如要重新chown  一下</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql 源码包下载地址&lt;br&gt;&lt;a href=&quot;https://github.com/mysql/mysql-server&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mysql/mysql-server&lt;/a&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://www.pengling.cc/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://www.pengling.cc/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>coreseek 从安装到使用总结</title>
    <link href="http://www.pengling.cc/2014/12/09/coreseek-install/"/>
    <id>http://www.pengling.cc/2014/12/09/coreseek-install/</id>
    <published>2014-12-09T06:41:58.000Z</published>
    <updated>2017-07-21T00:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章<br><a href="http://www.cnblogs.com/semonxv/p/3816376.html" target="_blank" rel="external">http://www.cnblogs.com/semonxv/p/3816376.html</a><br><a href="http://www.cnblogs.com/yjf512/p/3581869.html" target="_blank" rel="external">http://www.cnblogs.com/yjf512/p/3581869.html</a><br><a href="http://www.cnblogs.com/xingmeng/p/3723087.html" target="_blank" rel="external">http://www.cnblogs.com/xingmeng/p/3723087.html</a><br><a href="http://www.ibm.com/developerworks/cn/opensource/os-sphinx/" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/opensource/os-sphinx/</a><br><a href="http://www.coreseek.cn/docs/coreseek_4.1-sphinx_2.0.1-beta.html" target="_blank" rel="external">http://www.coreseek.cn/docs/coreseek_4.1-sphinx_2.0.1-beta.html</a><br><a href="http://sphinxsearch.com/wiki/doku.php?id=sphinx_chinese_tutorial" target="_blank" rel="external">http://sphinxsearch.com/wiki/doku.php?id=sphinx_chinese_tutorial</a><br><a href="http://www.imsiren.com/archives/766" target="_blank" rel="external">http://www.imsiren.com/archives/766</a></p>
<p>简单的说sphinx就是从某个数据源取过来数据（最常见的就是数据库） 生成索引文件（很类似数据库的索引） 然后利用索引实现快速搜索 </p>
<p>#安装<br>安装mmseg 这是个中文分词库其实如果你不用分词就按中文汉字搜都不用安这个<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">wget http://www.coreseek.cn/uploads/csft/4.0/coreseek-4.1-beta.tar.gz</div><div class="line">tar zxvf coreseek-4.1-beta.tar.gz</div><div class="line"></div><div class="line"><span class="built_in">cd</span> coreseek-4.1-beta</div><div class="line"><span class="built_in">cd</span> mmseg-3.2.14</div><div class="line">./bootstrap</div><div class="line">./configure --prefix=/usr/<span class="built_in">local</span>/mmseg3</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure></p>
<p>中间出现的错误<br>error: possibly undefined macro: AM_PROG_LIBTOOL<br>办法<br>yum install libtool</p>
<p>libtool: Version mismatch error.  This is libtool 2.2.6b<br>办法<br>直接复制 /usr/local/bin/litool到mmseg-3.2.14目录下，覆盖原来的libtool，然后重新make</p>
<p>安装coreseek 这个是核心软件我们的整个服务都是基于它的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/coreseek-4.1-beta</div><div class="line">./buildconf.sh</div><div class="line">./configure --prefix=/usr/<span class="built_in">local</span>/coreseek --with-mysql-includes=/usr/include/mysql/ --with-mysql-libs=/usr/lib64/mysql/ --with-mmseg=/usr/<span class="built_in">local</span>/mmseg/ --with-mmseg-includes=/usr/<span class="built_in">local</span>/mmseg/include/mmseg/ --with-mmseg-libs=/usr/<span class="built_in">local</span>/mmseg/lib/</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure></p>
<p>这里的mysql 是yum安装的所以分开指定mysql的头文件 和库文件</p>
<p>安装完成之后/usr/local/coreseek/bin 目录下是它的几个主要可执行程序<br>indexer 这个程序是用来生成索引文件的<br>searchd 这个是对外提供接口服务的守护进程<br>search  这个是用来在命令行调试的不用在实际开发中<br>还有两个是导出用的还没研究</p>
<p>#配置<br>mmseg基本不用配置 我也不会配置</p>
<p>进coreseek的配置文件目录<br>/usr/local/coreseek/etc<br>这里面两个自带的配置文件 一个是带全部注释的 一个是精简版的配置文件<br>我们改造个精简版的来说下基本配置</p>
<p>先在mysql建好一个文章表 news 测试用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">+----------+----------------------+------+-----+---------+----------------+</div><div class="line">| Field    | Type                 | Null | Key | Default | Extra          |</div><div class="line">+----------+----------------------+------+-----+---------+----------------+</div><div class="line">| id       | int(11)              | NO   | PRI | NULL    | auto_increment |</div><div class="line">| title    | varchar(255)         | NO   |     | NULL    |                |</div><div class="line">| content  | text                 | NO   |     | NULL    |                |</div><div class="line">| catid    | smallint(5) unsigned | NO   |     | NULL    |                |</div><div class="line">| dateline | datetime             | NO   |     | NULL    |                |</div><div class="line">+----------+----------------------+------+-----+---------+----------------+</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Minimal Sphinx configuration sample (clean, simple, functional)</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line"><span class="built_in">source</span> src1</div><div class="line">&#123;</div><div class="line">        <span class="built_in">type</span>                    = mysql</div><div class="line"></div><div class="line">        sql_host                = localhost</div><div class="line">        sql_user                = root</div><div class="line">        sql_pass                =</div><div class="line">        sql_db                  = news</div><div class="line">        sql_port                = 3306  <span class="comment"># optional, default is 3306</span></div><div class="line">        sql_query_pre           = <span class="built_in">set</span> names utf8</div><div class="line">        sql_query               = \</div><div class="line">                SELECT id,catid , UNIX_TIMESTAMP(dateline) AS dateline, title, content \</div><div class="line">                FROM news</div><div class="line"></div><div class="line">        sql_attr_uint           = catid</div><div class="line">        sql_attr_timestamp      = dateline</div><div class="line">        sql_field_string        = title</div><div class="line">        sql_field_string        = content</div><div class="line">        sql_query_info          = SELECT * FROM news WHERE id=<span class="variable">$id</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">index test1</div><div class="line">&#123;</div><div class="line">        <span class="built_in">source</span>                  = src1</div><div class="line">        path                    = /usr/<span class="built_in">local</span>/coreseek/var/data/test1</div><div class="line">        docinfo                 = extern</div><div class="line">        charset_type            = zh_cn.utf-8 <span class="comment">#设置数据编码为UTF8</span></div><div class="line">        ngram_len               = 0</div><div class="line">        charset_dictpath        = /usr/<span class="built_in">local</span>/mmseg/etc/</div><div class="line">        <span class="comment">#html_strip             =1 #去掉HTML标签</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">indexer</div><div class="line">&#123;</div><div class="line">        mem_limit               = 32M</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">searchd</div><div class="line">&#123;</div><div class="line">        listen                  = 9312</div><div class="line">        listen                  = 9306:mysql41</div><div class="line">        <span class="built_in">log</span>                     = /usr/<span class="built_in">local</span>/coreseek/var/<span class="built_in">log</span>/searchd.log</div><div class="line">        query_log               = /usr/<span class="built_in">local</span>/coreseek/var/<span class="built_in">log</span>/query.log</div><div class="line">        read_timeout            = 5</div><div class="line">        max_children            = 30</div><div class="line">        pid_file                = /usr/<span class="built_in">local</span>/coreseek/var/<span class="built_in">log</span>/searchd.pid</div><div class="line">        max_matches             = 1000</div><div class="line">        seamless_rotate         = 1</div><div class="line">        preopen_indexes         = 1</div><div class="line">        unlink_old              = 1</div><div class="line">        workers                 = threads <span class="comment"># for RT to work</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要分四大块</p>
<blockquote>
<p>source<br>数据源的配置 indexer在生成索引的时候就是根据这里的配置去读取mysql<br>sql_query_pre 这个是在主查询之前进行的sql操作 一般是设置字符集什么的<br>sql_query 这个就是核心的查询了 用来从数据库获取数据<br>sql<em>attr</em><em> 这个是属性 他是用来过滤用的相当于where的条件（把sphinx看成一种数据库就行）但是他是不能被全文检索的<br>sql<em>field</em></em> 这个是提供全文检索的字段 </p>
<p>index<br>这个是索引的配置选项<br>path 指定索引文件生成目录<br>docinfo 表示属性信息的存储方式 none 不存贮 inline和索引存在一起 docinfo单独存放<br>charset_type 这个一定要设置成utf-8<br>ngram_len 和 ngram_chars 这个是对未分词的中文用的 因为咱们配置了分词 这里要把ngram_len=0 设置成关闭 表示消原有的一元字符切分模式，不使其对中文分词产生干扰；<br>charset_table 接受的字符表和大小写转换规则 这个也注释掉 交给mmseg去做这些 Coreseek 提供的MMseg分词法内置了可接受的字符表，并且用户不可修改。当启用分词功能时，自动开启。<br>charset_dictpath 这个是核心配置啦 指定分词词典文件的路径</p>
<p>indexer<br>索引的一些配置项</p>
<p>searchd<br>守护进程的配置项<br>listen的格式 listen = ( address “:” port | port | path ) [ “:” protocol ]<br>9312端口提供的是api方式调用<br>9306端口指定了协议是mysql41 也就是可以像操作mysql一样写sql语句来执行访问 具体见官方SphinxQL说明</p>
</blockquote>
<p>#使用<br>先用indexer生成索引<br> /usr/local/coreseek/bin/indexer -c /usr/local/coreseek/etc/sphinx.conf –all –rotate<br> 如果是第一次生成不用加rotate 如果searchd服务已经运行则必须加rotate 意思是先生成一个临时索引文件 生成完毕后将正式索引变更为这个文件<br>用search 测试一个搜索</p>
<p>开启searchd服务<br>/usr/local/coreseek/bin/searchd -c /usr/local/coreseek/etc/sphinx.conf</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考文章&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/semonxv/p/3816376.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/semonxv/p/3816376.h
    
    </summary>
    
      <category term="linux" scheme="http://www.pengling.cc/categories/linux/"/>
    
    
      <category term="careseek" scheme="http://www.pengling.cc/tags/careseek/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出mysql读书笔记-基础篇</title>
    <link href="http://www.pengling.cc/2014/11/21/mysql-reading-notes-basic/"/>
    <id>http://www.pengling.cc/2014/11/21/mysql-reading-notes-basic/</id>
    <published>2014-11-21T08:54:07.000Z</published>
    <updated>2017-07-21T00:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>查看一个表的结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt; desc cats; </div><div class="line">+-------+------------------+------+-----+---------+----------------+</div><div class="line">| Field | Type             | Null | Key | Default | Extra          |</div><div class="line">+-------+------------------+------+-----+---------+----------------+</div><div class="line">| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</div><div class="line">| name  | char(15)         | NO   |     | NULL    |                |</div><div class="line">+-------+------------------+------+-----+---------+----------------+</div><div class="line">2 rows in set (0.04 sec)</div></pre></td></tr></table></figure></p>
<p>查看一个表的创建语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show create table cats\G;</div><div class="line">*************************** 1. row ***************************</div><div class="line">       Table: cats</div><div class="line">Create Table: CREATE TABLE `cats` (</div><div class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `name` char(15) CHARACTER SET utf8 NOT NULL,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=latin1</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>修改字段的名字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; alter table cats change `name` `cat_name` char(15);</div></pre></td></tr></table></figure></p>
<p>分组统计后汇总<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">mysql&gt; select kind,count(1) from cats group by kind with rollup;</div><div class="line">+------+----------+</div><div class="line">| kind | count(1) |</div><div class="line">+------+----------+</div><div class="line">|    1 |        1 |</div><div class="line">|    2 |        2 |</div><div class="line">| NULL |        3 |</div><div class="line">+------+----------+</div></pre></td></tr></table></figure></p>
<p>查询帮助文档<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mysql&gt; ? grant</div><div class="line">Name: &apos;GRANT&apos;</div><div class="line">Description:</div><div class="line">Syntax:</div><div class="line">GRANT</div><div class="line">    priv_type [(column_list)]</div><div class="line">      [, priv_type [(column_list)]] ...</div><div class="line">    ON [object_type] priv_level</div><div class="line">    TO user_specification [, user_specification] ...</div><div class="line">    [REQUIRE &#123;NONE | ssl_option [[AND] ssl_option] ...&#125;]</div><div class="line">    [WITH with_option ...]</div></pre></td></tr></table></figure></p>
<p>查询一个bit类型的字段<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; select flag+0,bin(flag),hex(flag) from cats where id = 10;</span></div><div class="line">+--------+-----------+-----------+</div><div class="line"><span class="section">| flag+0 | bin(flag) | hex(flag) |</span></div><div class="line">+--------+-----------+-----------+</div><div class="line"><span class="section">|     50 | 110010    | 32        |</span></div><div class="line">+--------+-----------+-----------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>datetime 类型和dateline类型 的区别<br>datetime 是不分时区的 存进去是啥就是啥<br>dateline 是分时区的 取出时会按时区进行转换 另外它的默认值是CURRENT_TIMESTAMP 如果插入null则转为当前时间 并且一个表中只能有一个列有这个默认值 </p>
<p>&lt;=&gt; 可以正确比较null值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">select null = null;</div><div class="line">+-------------+</div><div class="line">| null = null |</div><div class="line">+-------------+</div><div class="line">|        NULL |</div><div class="line">+-------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">select null&lt;=&gt;null;</div><div class="line">+-------------+</div><div class="line">| null&lt;=&gt;null |</div><div class="line">+-------------+</div><div class="line">|           1 |</div><div class="line">+-------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>将ip地址转换为数字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select INET_ATON(&apos;192.168.0.1&apos;);</div><div class="line">+--------------------------+</div><div class="line">| INET_ATON(&apos;192.168.0.1&apos;) |</div><div class="line">+--------------------------+</div><div class="line">|               3232235521 |</div><div class="line">+--------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; select INET_NTOA(3232235521);</div><div class="line">+-----------------------+</div><div class="line">| INET_NTOA(3232235521) |</div><div class="line">+-----------------------+</div><div class="line">| 192.168.0.1           |</div><div class="line">+-----------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;查看一个表的结构&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div cla
    
    </summary>
    
      <category term="mysql" scheme="http://www.pengling.cc/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://www.pengling.cc/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>lvm 学习总结</title>
    <link href="http://www.pengling.cc/2014/11/20/lvm-tutorial/"/>
    <id>http://www.pengling.cc/2014/11/20/lvm-tutorial/</id>
    <published>2014-11-20T09:02:37.000Z</published>
    <updated>2017-07-21T00:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>LVM(Logical Volume Manager)逻辑卷管理器 理论方面的东西就不写了转一个博客 <a href="http://hily.me/blog/2008/10/understanding-lvm/" target="_blank" rel="external">理解lvm</a></p>
<p>说一下我的理解 lvm要解决的问题就是要把几个离散量打散变成一个大杂烩的连续量，再在这连续量基础上去分成几个我们需要的离散量，</p>
<p>举个分粥的例子 原先就两碗粥怎么分给三个人 办法就是把两碗粥倒回锅里 重新盛出来三碗。。。</p>
<p>好了 我们的原来的两碗粥就是PP （物理分区）且这碗粥不能是串味的 他的文件格式必须是LVM<br>我们的大锅了 就是VG （卷组）<br>我们重新盛出来的三碗了 就是 LV （逻辑卷）</p>
<p>这个过程中还有几个概念 PP是不能直接往锅里倒的  他需要先变成PV （物理卷）一个PV是应一个PP的</p>
<p>还有两个概念PE 物理扩展单元（Physical Extends） 和LE 逻辑扩展单元（Logical Extends） 我们可以理解为粥的计量单位 升 只不过PE是用来计量PV 的 LE是计量LV的 PE和LE是一一对应的</p>
<p>下面上点例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@localhost mytest]<span class="comment">#fdisk -l #我事先分好两个新区 [分区教程](http://www.cnblogs.com/gaojun/archive/2012/08/22/2650229.html)</span></div><div class="line">Disk /dev/sdb: 10.7 GB, 10737418240 bytes</div><div class="line">255 heads, 63 sectors/track, 1305 cylinders</div><div class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</div><div class="line">Sector size (logical/physical): 512 bytes / 512 bytes</div><div class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</div><div class="line">Disk identifier: 0xcbeb1b34</div><div class="line"></div><div class="line">   Device Boot      Start         End      Blocks   Id  System</div><div class="line">/dev/sdb1               1         262     2104483+  8e  Linux LVM</div><div class="line">/dev/sdb2             263        1305     8377897+  8e  Linux LVM</div></pre></td></tr></table></figure></p>
<p>将我们的分区PP变为PV<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">[root@localhost mytest]<span class="comment"># pvcreate /dev/sdb1 </span></div><div class="line">  Physical volume <span class="string">"/dev/sdb1"</span> successfully created</div><div class="line">[root@localhost mytest]<span class="comment"># pvcreate /dev/sdb2</span></div><div class="line">  Physical volume <span class="string">"/dev/sdb2"</span> successfully created</div><div class="line">[root@localhost mytest]<span class="comment"># pvdisplay #显示当前的PV有哪些</span></div><div class="line">  --- Physical volume ---</div><div class="line">  PV Name               /dev/sda2</div><div class="line">  VG Name               VolGroup</div><div class="line">  PV Size               19.51 GiB / not usable 3.00 MiB</div><div class="line">  Allocatable           yes (but full)</div><div class="line">  PE Size               4.00 MiB</div><div class="line">  Total PE              4994</div><div class="line">  Free PE               0</div><div class="line">  Allocated PE          4994</div><div class="line">  PV UUID               P3Lfss-AjZM-Ybeu-PdXN-zWXr-ipn1-sdoDNt</div><div class="line"></div><div class="line">  <span class="string">"/dev/sdb1"</span> is a new physical volume of <span class="string">"2.01 GiB"</span></div><div class="line">  --- NEW Physical volume ---</div><div class="line">  PV Name               /dev/sdb1</div><div class="line">  VG Name</div><div class="line">  PV Size               2.01 GiB</div><div class="line">  Allocatable           NO</div><div class="line">  PE Size               0</div><div class="line">  Total PE              0</div><div class="line">  Free PE               0</div><div class="line">  Allocated PE          0</div><div class="line">  PV UUID               7un1fc-rBf6-2vv9-mkuw-m3bd-Fxu5-blDX69</div><div class="line"></div><div class="line">  <span class="string">"/dev/sdb2"</span> is a new physical volume of <span class="string">"7.99 GiB"</span></div><div class="line">  --- NEW Physical volume ---</div><div class="line">  PV Name               /dev/sdb2</div><div class="line">  VG Name</div><div class="line">  PV Size               7.99 GiB</div><div class="line">  Allocatable           NO</div><div class="line">  PE Size               0</div><div class="line">  Total PE              0</div><div class="line">  Free PE               0</div><div class="line">  Allocated PE          0</div><div class="line">  PV UUID               e2fePJ-Mv1D-Ac6I-p6Kn-kbxg-nWHU-PkMQc0</div></pre></td></tr></table></figure></p>
<p>开始把PV往锅里加<br>可以选择之前已经存在一个VG 用vgextend去扩展它 也可以新建一个VG vgcreate<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">[root@localhost mytest]<span class="comment"># vgdisplay</span></div><div class="line">  --- Volume group ---</div><div class="line">  VG Name               VolGroup</div><div class="line">  System ID</div><div class="line">  Format                lvm2</div><div class="line">  Metadata Areas        1</div><div class="line">  Metadata Sequence No  3</div><div class="line">  VG Access             <span class="built_in">read</span>/write</div><div class="line">  VG Status             resizable</div><div class="line">  MAX LV                0</div><div class="line">  Cur LV                2</div><div class="line">  Open LV               2</div><div class="line">  Max PV                0</div><div class="line">  Cur PV                1</div><div class="line">  Act PV                1</div><div class="line">  VG Size               19.51 GiB <span class="comment">#这是VG扩展前的体积</span></div><div class="line">  PE Size               4.00 MiB</div><div class="line">  Total PE              4994</div><div class="line">  Alloc PE / Size       4994 / 19.51 GiB</div><div class="line">  Free  PE / Size       0 / 0</div><div class="line">  VG UUID               Jf633Y-moeI-est9-MHP5-yVSf-0SOz-skQhzZ</div><div class="line">[root@localhost mytest]<span class="comment"># vgextend VolGroup /dev/sdb1</span></div><div class="line">  Volume group <span class="string">"VolGroup"</span> successfully extended</div><div class="line">[root@localhost mytest]<span class="comment"># vgextend VolGroup /dev/sdb2</span></div><div class="line">  Volume group <span class="string">"VolGroup"</span> successfully extended</div><div class="line">[root@localhost mytest]<span class="comment"># vgdisplay</span></div><div class="line">  --- Volume group ---</div><div class="line">  VG Name               VolGroup</div><div class="line">  System ID</div><div class="line">  Format                lvm2</div><div class="line">  Metadata Areas        3</div><div class="line">  Metadata Sequence No  5</div><div class="line">  VG Access             <span class="built_in">read</span>/write</div><div class="line">  VG Status             resizable</div><div class="line">  MAX LV                0</div><div class="line">  Cur LV                2</div><div class="line">  Open LV               2</div><div class="line">  Max PV                0</div><div class="line">  Cur PV                3</div><div class="line">  Act PV                3</div><div class="line">  VG Size               29.50 GiB <span class="comment">#可以看到VG的体积变大了</span></div><div class="line">  PE Size               4.00 MiB</div><div class="line">  Total PE              7552</div><div class="line">  Alloc PE / Size       4994 / 19.51 GiB</div><div class="line">  Free  PE / Size       2558 / 9.99 GiB</div><div class="line">  VG UUID               Jf633Y-moeI-est9-MHP5-yVSf-0SOz-skQhzZ</div></pre></td></tr></table></figure></p>
<p>下面是开始往外盛粥了 去创建3个LV<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@localhost mytest]<span class="comment"># lvcreate -L 3G -n newLv1 VolGroup</span></div><div class="line">  Logical volume <span class="string">"newLv1"</span> created</div><div class="line">[root@localhost mytest]<span class="comment"># lvcreate -L 3G -n newLv2 VolGroup</span></div><div class="line">  Logical volume <span class="string">"newLv2"</span> created</div><div class="line">[root@localhost mytest]<span class="comment"># lvcreate -L 3G -n newLv3 VolGroup</span></div><div class="line">  Logical volume <span class="string">"newLv3"</span> created</div><div class="line"></div><div class="line">[root@localhost mytest]<span class="comment"># mkfs.ext3 /dev/VolGroup/newLv1 #格式化我们刚分出来的分区</span></div><div class="line">[root@localhost mytest]<span class="comment"># mkdir -p /data/mnt1</span></div><div class="line">[root@localhost mytest]<span class="comment"># mount /dev/VolGroup/newLv1 /data/mnt1 #把我们的分区挂载到一个目录</span></div><div class="line"></div><div class="line">[root@localhost mytest]<span class="comment"># df -h</span></div><div class="line">Filesystem                    Size  Used Avail Use% Mounted on</div><div class="line">/dev/mapper/VolGroup-lv_root   18G   12G  4.6G  73% /</div><div class="line">tmpfs                         495M     0  495M   0% /dev/shm</div><div class="line">/dev/sda1                     485M   57M  403M  13% /boot</div><div class="line">/dev/mapper/VolGroup-newLv1   3.0G   69M  2.8G   3% /data/mnt1</div></pre></td></tr></table></figure></p>
<p>记得写入/etc/fstab 在重启后自动挂载 关于fstab的配置 <a href="https://wiki.archlinux.org/index.php/Fstab_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29" target="_blank" rel="external">https://wiki.archlinux.org/index.php/Fstab_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29</a></p>
<p>下面我们试一下删除一个逻辑卷 和扩容一个逻辑卷<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost mytest]<span class="comment"># lvremove -f VolGroup/newLv2 #删除一个未挂载的逻辑卷</span></div><div class="line">  Logical volume <span class="string">"newLv2"</span> successfully removed</div></pre></td></tr></table></figure></p>
<p>在改变逻辑卷有个要注意的地方 我们的文件系统是建立在逻辑卷（分区）之上的<br><img src="/img/lvm.jpg" alt="文件系统和分区"><br>我们通过df看到的文件夹的大小 实际是文件系统的大小 ，文件系统的大小 是可以小于分区的大小的<br>当我们想扩大一个文件系统的时候 首先要扩展它的分区（逻辑卷）然后再扩展文件系统 不然盒子就撑爆了<br>而当我们想缩小一个文件系统的时候 相反的首先要缩小文件系统 再缩小分区 不然 里面的盒子就压烂了<br>如果我们想扩容 那可以在线扩容 而如果是要缩小 则需要先umount 这个分区 缩小完再挂回去</p>
<ul>
<li><p>扩大一个逻辑卷</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># df -h</span></div><div class="line">Filesystem                    Size  Used Avail Use% Mounted on</div><div class="line">/dev/mapper/VolGroup-lv_root   18G   12G  4.6G  73% /</div><div class="line">tmpfs                         495M     0  495M   0% /dev/shm</div><div class="line">/dev/sda1                     485M   57M  403M  13% /boot</div><div class="line">/dev/mapper/VolGroup-newLv1   3.0G   69M  2.8G   3% /data/mnt1</div><div class="line">[root@localhost ~]<span class="comment"># lvextend -L +1G /dev/VolGroup/newLv1  #扩展逻辑卷</span></div><div class="line">  Extending logical volume newLv1 to 4.00 GiB</div><div class="line">  Logical volume newLv1 successfully resized</div><div class="line">[root@localhost ~]<span class="comment"># df -h</span></div><div class="line">Filesystem                    Size  Used Avail Use% Mounted on</div><div class="line">/dev/mapper/VolGroup-lv_root   18G   12G  4.6G  73% /</div><div class="line">tmpfs                         495M     0  495M   0% /dev/shm</div><div class="line">/dev/sda1                     485M   57M  403M  13% /boot</div><div class="line">/dev/mapper/VolGroup-newLv1   3.0G   69M  2.8G   3% /data/mnt1 <span class="comment">#我们只扩大了逻辑卷但是并没有扩大文件系统所以 df看到的大小并没变</span></div><div class="line">[root@localhost ~]<span class="comment"># resize2fs /dev/VolGroup/newLv1 #通过resize2fs 让文件系统重新适应它所在分区的大小</span></div><div class="line">resize2fs 1.41.12 (17-May-2010)</div><div class="line">Filesystem at /dev/VolGroup/newLv1 is mounted on /data/mnt1; on-line resizing required</div><div class="line">old desc_blocks = 1, new_desc_blocks = 1</div><div class="line">Performing an on-line resize of /dev/VolGroup/newLv1 to 1048576 (4k) blocks.</div><div class="line">The filesystem on /dev/VolGroup/newLv1 is now 1048576 blocks long.</div><div class="line"></div><div class="line">[root@localhost ~]<span class="comment"># df -h</span></div><div class="line">Filesystem                    Size  Used Avail Use% Mounted on</div><div class="line">/dev/mapper/VolGroup-lv_root   18G   12G  4.6G  73% /</div><div class="line">tmpfs                         495M     0  495M   0% /dev/shm</div><div class="line">/dev/sda1                     485M   57M  403M  13% /boot</div><div class="line">/dev/mapper/VolGroup-newLv1   4.0G   71M  3.7G   2% /data/mnt1</div></pre></td></tr></table></figure>
</li>
<li><p>缩小一个逻辑卷<br><a href="http://seriousbirder.com/blogs/lvreduce-ext4-example/" target="_blank" rel="external">一篇教程 http://seriousbirder.com/blogs/lvreduce-ext4-example/</a></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># umount /data/mnt1/</span></div><div class="line">[root@localhost ~]<span class="comment"># e2fsck -f /dev/VolGroup/newLv1 #先检测一下文件系统</span></div><div class="line">e2fsck 1.41.12 (17-May-2010)</div><div class="line">Pass 1: Checking inodes, blocks, and sizes</div><div class="line">Pass 2: Checking directory structure</div><div class="line">Pass 3: Checking directory connectivity</div><div class="line">/lost+found not found.  Create&lt;y&gt;? yes</div><div class="line"></div><div class="line">Pass 4: Checking reference counts</div><div class="line">Pass 5: Checking group summary information</div><div class="line"></div><div class="line">/dev/VolGroup/newLv1: ***** FILE SYSTEM WAS MODIFIED *****</div><div class="line">/dev/VolGroup/newLv1: 13/262144 files (0.0% non-contiguous), 34397/1048576 blocks</div><div class="line">[root@localhost ~]<span class="comment"># resize2fs -p /dev/VolGroup/newLv1 2G #调整文件系统的大小</span></div><div class="line">resize2fs 1.41.12 (17-May-2010)</div><div class="line">Resizing the filesystem on /dev/VolGroup/newLv1 to 524288 (4k) blocks.</div><div class="line">Begin pass 3 (max = 32)</div><div class="line">Scanning inode table          XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</div><div class="line">The filesystem on /dev/VolGroup/newLv1 is now 524288 blocks long.</div><div class="line">[root@localhost ~]<span class="comment"># lvreduce -L 2G /dev/VolGroup/newLv1 #调整逻辑卷的大小</span></div><div class="line">  WARNING: Reducing active logical volume to 2.00 GiB</div><div class="line">  THIS MAY DESTROY YOUR DATA (filesystem etc.)</div><div class="line">Do you really want to reduce newLv1? [y/n]: Y</div><div class="line">  Reducing logical volume newLv1 to 2.00 GiB</div><div class="line">  Logical volume newLv1 successfully resized</div><div class="line">[root@localhost ~]<span class="comment"># mount /dev/VolGroup/newLv1 /data/mnt1/ #重新挂载回去</span></div><div class="line">[root@localhost mnt1]<span class="comment"># df -h</span></div><div class="line">Filesystem                    Size  Used Avail Use% Mounted on</div><div class="line">/dev/mapper/VolGroup-lv_root   18G   12G  4.6G  73% /</div><div class="line">tmpfs                         495M     0  495M   0% /dev/shm</div><div class="line">/dev/sda1                     485M   57M  403M  13% /boot</div><div class="line">/dev/mapper/VolGroup-newLv1   2.0G   69M  1.9G   4% /data/mnt1</div></pre></td></tr></table></figure>
<p>还有为啥一个逻辑卷要起两个名字 我不理解 欢迎指教<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost mnt1]<span class="comment"># ll /dev/mapper/VolGroup-newLv1 /dev/VolGroup/newLv1</span></div><div class="line">lrwxrwxrwx. 1 root root 7 Nov 22 00:12 /dev/mapper/VolGroup-newLv1 -&gt; ../dm-2</div><div class="line">lrwxrwxrwx. 1 root root 7 Nov 22 00:12 /dev/VolGroup/newLv1 -&gt; ../dm-2</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LVM(Logical Volume Manager)逻辑卷管理器 理论方面的东西就不写了转一个博客 &lt;a href=&quot;http://hily.me/blog/2008/10/understanding-lvm/&quot; target=&quot;_blank&quot; rel=&quot;external
    
    </summary>
    
      <category term="linux" scheme="http://www.pengling.cc/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.pengling.cc/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux 下的suid和sgid的作用</title>
    <link href="http://www.pengling.cc/2014/11/20/linux-suid-sgid/"/>
    <id>http://www.pengling.cc/2014/11/20/linux-suid-sgid/</id>
    <published>2014-11-20T03:19:30.000Z</published>
    <updated>2017-07-21T00:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>这几天集中扫除自己不清楚的一些linux基础概念，今天搞一下suid和sgid</p>
<p>这俩东西是干嘛用的呢 它主要用在一些可执行文件上 简单说就是让一个用户在执行这个程序的时候拥有这个程序创建者的权限</p>
<p>关于这个东西最常举的一个例子就是passwd这个命令 </p>
<p>我们知道一些敏感文件的读写权限是只有root才可以的 但是有时候普通用户又需要间接的去用这个文件<br>比如passwd这个命令 他的执行文件是在 /usr/bin/passwd 这个执行文件是一个程序而这个程序需要操作的数据来自 /etc/passwd 等普通用户没权限的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># ll /usr/bin/passwd /etc/passwd</span></div><div class="line">-rw-r--r--. 1 root root  1584 Aug  1 00:33 /etc/passwd</div><div class="line">-rwsr-xr-x. 1 root root 30768 Feb 22  2012 /usr/bin/passwd</div></pre></td></tr></table></figure></p>
<p>虽然/usr/bin/passwd 每个用户都能去执行它 但是光有程序没数据是不行的啊 怎么办？<br>这时候suid和sgid就为了解决这个问题出现了<br>我们注意到 /usr/bin/passwd 的用户执行位是个s而不是常见x 这个就说明这个文件设定了suid属性<br>我以前一直错误的以为suid是一个具体用户的id其实不是的 它只是一个标志位 标志这个文件是不是设置过suid</p>
<p>具体的说当一个用户去执行passwd这个命令的时候，这个命令的是以创建者root的身份启动的 而不是这个命令的执行者</p>
<p>我们做个试验 打开俩终端 一个登陆root 一个登陆一个普通用户kuff<br>在kuff的终端去执行passwd命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">login as: kuff</div><div class="line">kuff@192.168.0.183<span class="string">'s password:</span></div><div class="line">[kuff@localhost ~]$ passwd</div><div class="line">Changing password for user kuff.</div><div class="line">Changing password for kuff.</div><div class="line">(current) UNIX password:</div></pre></td></tr></table></figure></p>
<p>在root的终端查看进程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># ps -ef | grep passwd</span></div><div class="line">root      8677  8654  0 19:50 pts/1    00:00:00 passwd</div><div class="line">root      8680  1713  0 19:50 pts/0    00:00:00 grep passwd</div></pre></td></tr></table></figure></p>
<p>看到了吧 在1终端的上的passwd命令是以root身份执行的<br>至于sgid 理解了suid不用说应该也能理解了</p>
<p>说了这么多怎么给一个文件设置sgid？<br>chmod u+s a.txt #设置sgid<br>chmod u-s a.txt #取消设置sgid</p>
<p>当然所有设置了sgid的程序都是存在潜在风险的 因为程序如果有漏洞 别人就能拿这个程序直接执行root才能执行的东西</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天集中扫除自己不清楚的一些linux基础概念，今天搞一下suid和sgid&lt;/p&gt;
&lt;p&gt;这俩东西是干嘛用的呢 它主要用在一些可执行文件上 简单说就是让一个用户在执行这个程序的时候拥有这个程序创建者的权限&lt;/p&gt;
&lt;p&gt;关于这个东西最常举的一个例子就是passwd这个命
    
    </summary>
    
      <category term="linux" scheme="http://www.pengling.cc/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.pengling.cc/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux 用户组</title>
    <link href="http://www.pengling.cc/2014/11/19/linux-user-group/"/>
    <id>http://www.pengling.cc/2014/11/19/linux-user-group/</id>
    <published>2014-11-19T14:39:59.000Z</published>
    <updated>2017-07-21T00:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>发现自己对linux中用户组的这个概念还是比较模糊的今天又翻了翻书总结记录一下</p>
<p>当我们添加一个用户的时候如果没有给这个用户指定一个用户组 那么系统会创建一个和用户名相同的用户组<br>我们用 useradd kuff 添加一个测试用户<br>再用 groupadd testgroup 添加一个测试用户组<br>把刚才的测试用户加入到测试组 gpasswd -a kuff testgroup<br>这时候再去查看/etc/group 中的内容发现多了两个用户组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ tail -2 /etc/group</div><div class="line">kuff:x:501:</div><div class="line">testgroup:x:502:kuff</div></pre></td></tr></table></figure></p>
<p>既然叫组，那一个用户自然可以属于多个组，怎么看自己属于那些组呢？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ su - kuff <span class="comment">#切换到kuff用户</span></div><div class="line">$ groups</div><div class="line">kuff testgroup</div></pre></td></tr></table></figure></p>
<p>可以看到kuff属于两个组 这时候如果去创建一个文件 文件的组是属于kuff组的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ touch 1.txt</div><div class="line">$ ll</div><div class="line">total 0</div><div class="line">-rw-rw-r-- 1 kuff kuff 0 Nov 19 23:00 1.txt</div></pre></td></tr></table></figure></p>
<p>那如果我想切换到我的另外一个组呢？newgrp<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ newgrp testgroup</div><div class="line">$ groups</div><div class="line">testgroup kuff</div></pre></td></tr></table></figure></p>
<p>发现变化了吧？testgroup挪到前面去了 此时再去创建文件 新文件的属组变成了 testgroup</p>
<p>这里涉及到俩概念 <strong>初始用户组</strong>  和 <strong>有效用户组</strong></p>
<ul>
<li>初始用户组呢就是创建用户的时候指定给它的用户组（没指定就是用户名同名用户组） 初始用户组并不会在/etc/group的成员中看到因为它已经记录到用户身份信息中了<br>举个例子我们在添加一个用户kuff2 这次指定他的组为前面的kuff</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ useradd -gkuff kuff2</div><div class="line">$ grep kuff /etc/group /etc/passwd</div><div class="line">/etc/group:kuff:x:501:</div><div class="line">/etc/group:testgroup:x:502:kuff</div><div class="line">/etc/passwd:kuff:x:501:501::/home/kuff:/bin/bash</div><div class="line">/etc/passwd:kuff2:x:502:501::/home/kuff2:/bin/bash</div></pre></td></tr></table></figure>
<p>我们看到虽然kuff2用户属于kuff用户组但是 在group文件的最后一项成员中并没有它</p>
<ul>
<li>有效用户组呢就是代表用户当前使用的组 也就是groups排在前面的那个用户组 当用户去创建新文件的时候就会根据这个用户组去决定文件属于哪个组<br>用户刚登陆时有效用户组就是初始用户组 </li>
</ul>
<p>当然在判断用户读写权限的时候是不区别是不是有效用户组的 只要他在那个组里就可以读写</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发现自己对linux中用户组的这个概念还是比较模糊的今天又翻了翻书总结记录一下&lt;/p&gt;
&lt;p&gt;当我们添加一个用户的时候如果没有给这个用户指定一个用户组 那么系统会创建一个和用户名相同的用户组&lt;br&gt;我们用 useradd kuff 添加一个测试用户&lt;br&gt;再用 groupa
    
    </summary>
    
      <category term="linux" scheme="http://www.pengling.cc/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.pengling.cc/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>python中的 @staticmethod 和 @classmethod</title>
    <link href="http://www.pengling.cc/2014/09/26/the-difference-between-staticmethod-and-one-classmethod/"/>
    <id>http://www.pengling.cc/2014/09/26/the-difference-between-staticmethod-and-one-classmethod/</id>
    <published>2014-09-26T10:31:39.000Z</published>
    <updated>2017-07-21T00:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习python 看到关于类的介绍的时候一个让我迷惑的地方就是这两个装饰器 静态方法 和类方法</p>
<p>在php 我没有接触过类方法这个概念</p>
<p>经过一番百度谷歌 以下是我个人的见解如有错误 欢迎指正</p>
<blockquote>
<p>其实classmethod和staticmethod的作用是极为相似的甚至可以说staticmethod的存才是有点多余的</p>
<ul>
<li>staticmethod完全可以用一个类外的方法替代，但是为了让代码看着更有组织纪律性让代码的逼格更高才会写静态方法</li>
<li>classmethod更像是我们习惯的静态方法 但是他有个奇葩的地方 他可以用一个实例去调用 给你造成一种假象好像用实例去调用静态方法时他就是个实例方法其实他还是静态的全局的 - -！</li>
</ul>
</blockquote>
<p>再白话点说classmethod 说明这个方法还和类有着一丝联系（通过cls）而staticmethod则是一个工具方法 他是不应有状态的完全可以脱离开这个类</p>
<p>这种关系是很微妙的 你可以说我完全可以在staticmethod中通过类名去调用这个当前类的属性 实现和classmethod一样的功能啊，但是这是你硬写上去的 如果这个类被继承那么这种硬编码也就失效了</p>
<p>有点抽象 下面上具体代码说事<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Annimal</span><span class="params">(object)</span>:</span></div><div class="line">    debug = <span class="keyword">False</span></div><div class="line">    weight = <span class="number">0</span></div><div class="line">    name = <span class="string">''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, weight,name)</span>:</span></div><div class="line">        self.weight = weight</div><div class="line">        self.name = name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self, num)</span>:</span> <span class="comment"># 一个普通的类方法</span></div><div class="line">        self.weight += num</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outinfo</span><span class="params">(self)</span>:</span><span class="comment"># 一个普通的类方法</span></div><div class="line">        <span class="keyword">if</span>(self.debug):</div><div class="line">            print(self.__dict__)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.formatinfo(self.name, self.weight)</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isdebug</span><span class="params">(cls, debug=False)</span>:</span> <span class="comment"># 类方法</span></div><div class="line">        cls.debug = debug</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">staticdebug</span><span class="params">(debug)</span>:</span> <span class="comment"># 静态方法</span></div><div class="line">         Annimal.debug = debug</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">formatinfo</span><span class="params">(name, weight)</span>:</span> <span class="comment"># 静态方法</span></div><div class="line">        print(<span class="string">"the name is %s and weight is %d"</span> % (name, weight))</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Annimal)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">cat1 = Cat(<span class="number">10</span>, <span class="string">'whitecat'</span>)</div><div class="line">cat2 = Cat(<span class="number">15</span>, <span class="string">'blackcat'</span>)</div><div class="line">cat1.isdebug(<span class="keyword">True</span>) <span class="comment">#当然这里一般写成Cat.isdebug(True) 为了体现类方法特点我写成了用一个实例去调取</span></div><div class="line">cat3 = Cat(<span class="number">20</span>, <span class="string">'flowercat'</span>) <span class="comment">#是的花猫 - -！</span></div><div class="line">cat1.outinfo()</div><div class="line">cat2.outinfo()</div><div class="line">cat3.outinfo()</div><div class="line">print(<span class="string">'-'</span>*<span class="number">10</span>, <span class="string">'用当前类调用类方法，会影响之后的所有实例'</span>)</div><div class="line">Cat.isdebug(<span class="keyword">False</span>)</div><div class="line">cat1.eat(<span class="number">3</span>)</div><div class="line">cat2.eat(<span class="number">4</span>)</div><div class="line">cat1.outinfo()</div><div class="line">cat2.outinfo()</div><div class="line">print(<span class="string">'-'</span>*<span class="number">10</span>, <span class="string">'用父类去调用类方法，不会影响子类'</span>)</div><div class="line">Annimal.isdebug(<span class="keyword">True</span>)</div><div class="line">cat1.outinfo()</div><div class="line">cat2.outinfo()</div><div class="line">print(<span class="string">'-'</span>*<span class="number">10</span>, <span class="string">'调用当前类的静态方法,哈哈这种硬编码的方式是不会作用到子类上的'</span>)</div><div class="line">Cat.staticdebug(<span class="keyword">True</span>)</div><div class="line">cat1.outinfo()</div><div class="line">cat2.outinfo()</div></pre></td></tr></table></figure></p>
<p>这段程序的输出如下</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">'weight'</span>: <span class="number">10</span>, <span class="string">'name'</span>: <span class="string">'whitecat'</span>&#125;</div><div class="line">&#123;<span class="string">'weight'</span>: <span class="number">15</span>, <span class="string">'name'</span>: <span class="string">'blackcat'</span>&#125;</div><div class="line">&#123;<span class="string">'weight'</span>: <span class="number">20</span>, <span class="string">'name'</span>: <span class="string">'flowercat'</span>&#125;</div><div class="line">---------- 用当前类调用类方法，会影响之后的所有实例</div><div class="line">the <span class="keyword">name</span> <span class="keyword">is</span> whitecat <span class="built_in">and</span> weight <span class="keyword">is</span> <span class="number">13</span></div><div class="line">the <span class="keyword">name</span> <span class="keyword">is</span> blackcat <span class="built_in">and</span> weight <span class="keyword">is</span> <span class="number">19</span></div><div class="line">---------- 用父类去调用类方法，不会影响子类</div><div class="line">the <span class="keyword">name</span> <span class="keyword">is</span> whitecat <span class="built_in">and</span> weight <span class="keyword">is</span> <span class="number">13</span></div><div class="line">the <span class="keyword">name</span> <span class="keyword">is</span> blackcat <span class="built_in">and</span> weight <span class="keyword">is</span> <span class="number">19</span></div><div class="line">---------- 调用当前类的静态方法,哈哈这种硬编码的方式是不会作用到子类上的</div><div class="line">the <span class="keyword">name</span> <span class="keyword">is</span> whitecat <span class="built_in">and</span> weight <span class="keyword">is</span> <span class="number">13</span></div><div class="line">the <span class="keyword">name</span> <span class="keyword">is</span> blackcat <span class="built_in">and</span> weight <span class="keyword">is</span> <span class="number">19</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习python 看到关于类的介绍的时候一个让我迷惑的地方就是这两个装饰器 静态方法 和类方法&lt;/p&gt;
&lt;p&gt;在php 我没有接触过类方法这个概念&lt;/p&gt;
&lt;p&gt;经过一番百度谷歌 以下是我个人的见解如有错误 欢迎指正&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实cla
    
    </summary>
    
      <category term="Python" scheme="http://www.pengling.cc/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.pengling.cc/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>putty通过密钥自动登陆 关闭密码登陆</title>
    <link href="http://www.pengling.cc/2014/09/24/change-the-ssh-port-and-auto-login/"/>
    <id>http://www.pengling.cc/2014/09/24/change-the-ssh-port-and-auto-login/</id>
    <published>2014-09-24T03:45:04.000Z</published>
    <updated>2017-07-21T00:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己的服务器总是被别人扫描 看着心里就不爽 于是决定改ssh的登陆关口关掉密码登陆</p>
<p>#修改ssh登陆端口<br>这个简单修改sshd的配置文件就OK了<br>打开 /etc/ssh/sshd_config<br>修改里面的Port</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Port 2014</div><div class="line"><span class="comment">#ListenAddress 0.0.0.0</span></div><div class="line"><span class="comment">#ListenAddress ::</span></div></pre></td></tr></table></figure>
<p>注意的是如果开着防火墙别忘了在防火墙上新开个端口</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#加入新的端口</span></div><div class="line">iptables -A INPUT -p tcp -m tcp --dport 2014 -j ACCEPT</div><div class="line"><span class="comment">#找到原来22端口的那条id 比如是1</span></div><div class="line">iptables -nL --line-nunmber</div><div class="line"><span class="comment">#删除掉他</span></div><div class="line">iptables -D INPUT 1</div><div class="line">service iptables save</div></pre></td></tr></table></figure>
<p>修改完重启下sshd服务</p>
<h1 id="用密钥登陆服务器"><a href="#用密钥登陆服务器" class="headerlink" title="用密钥登陆服务器"></a>用密钥登陆服务器</h1><p>大体的原理很简单就是一个非对称加密解密的过程<br>生成两个密钥（这里我用的<a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" target="_blank" rel="external">PuTTYgen</a>）一个公钥 一个私钥<br>公钥放在服务器上 私钥放在你自己的电脑上 就OK了</p>
<p>我windows电脑上用的PuTTY 下面说用这个软件的免密码登陆流程<br>具体流程：</p>
<ul>
<li><p>用PuTTYgen生成一对密钥,注意那个文字提示要鼠标不停的在那动才能生成(- -!)<br><img src="/img/putty_1.jpg" alt="生成密钥"><br>生成完了之后私钥保存到你本地一个地方 他会提示你是否确认没设密码就存 我要无密码登陆那就不设了<br>公钥呢就没必要存了 那个进度条下面的那段文字 复制一下就行了 一会粘到服务器里去</p>
</li>
<li><p>到你服务器上去在用户目录下新建一个.ssh目录 在这个目录下新建一个 authorized_keys文件（当然也不一定叫这个可以在上面说到的sshd_config里去修改这个文件名）<br>编辑这个文件把刚才的公钥字符串粘进去 其实这个文件是可以有多个公钥的 一行一个就行了</p>
</li>
<li><p>回到你本地putty上配置<br>编辑一条记录,选择你刚才生成的私钥，别忘了保存<br><img src="/img/putty_2.jpg" alt="修改密钥文件地址"><br>好了现在去登陆吧<br>会提示你输入用户名 输入完用户名不用密码就能登陆进去了<br>如果你连用户名也不想输入 那编辑putty的默认用户名就行了<br><img src="/img/putty_3.jpg" alt="修改默认用户名"></p>
</li>
</ul>
<p>#关闭密码登陆<br>还是编辑/etc/ssh/sshd_config<br>找到最下面的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PasswordAuthentication no</div><div class="line"><span class="comment">#默认是yes改成no就行了</span></div></pre></td></tr></table></figure></p>
<p>重启sshd<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">service sshd restart</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己的服务器总是被别人扫描 看着心里就不爽 于是决定改ssh的登陆关口关掉密码登陆&lt;/p&gt;
&lt;p&gt;#修改ssh登陆端口&lt;br&gt;这个简单修改sshd的配置文件就OK了&lt;br&gt;打开 /etc/ssh/sshd_config&lt;br&gt;修改里面的Port&lt;/p&gt;
&lt;figure cl
    
    </summary>
    
      <category term="linux" scheme="http://www.pengling.cc/categories/linux/"/>
    
    
      <category term="ssh" scheme="http://www.pengling.cc/tags/ssh/"/>
    
      <category term="linux" scheme="http://www.pengling.cc/tags/linux/"/>
    
      <category term="security" scheme="http://www.pengling.cc/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>用mailx 在linux上发送邮件</title>
    <link href="http://www.pengling.cc/2014/09/23/use-mailx/"/>
    <id>http://www.pengling.cc/2014/09/23/use-mailx/</id>
    <published>2014-09-23T08:09:00.000Z</published>
    <updated>2017-07-21T00:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近突然想把服务器上的日志 通过邮件发送出去 于是收集整理了一下关于在linux上发送邮件的知识</p>
<p>#理论基础</p>
<h2 id="MUA-MTA-MDA"><a href="#MUA-MTA-MDA" class="headerlink" title="MUA MTA MDA"></a>MUA MTA MDA</h2><p><a href="http://emo17emo17.blogspot.com/2009/03/blog-post_30.html" target="_blank" rel="external">http://emo17emo17.blogspot.com/2009/03/blog-post_30.html</a><br><a href="http://blog.sina.com.cn/s/blog_726618d901011n8s.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_726618d901011n8s.html</a></p>
<p>网上关于邮件发送流程分析的文章很多 找了两篇讲解的比较好的<br>最主要的是理解MUA MTA MDA 三个概念 前两个比较好理解 一个是客户端一个是服务器 但是这个MDA看了好几篇文章才算清楚了点</p>
<p>其实邮件服务器的结构很类似我们常见的http服务器 </p>
<p>MTA 就像是nginx 他接收来自客户端的请求 但是MTA他只是接收和发送功能 他是不处理具体的邮件逻辑的 他只是网络部分</p>
<p>MDA 呢就像是nginx后面cgi程序 他才是真正处理邮件逻辑的程序 例如过滤垃圾邮件啊 自动回复什么的</p>
<h2 id="SMTP-POP3-IMAP"><a href="#SMTP-POP3-IMAP" class="headerlink" title="SMTP POP3/IMAP"></a>SMTP POP3/IMAP</h2><p>邮件协议<br>简单的说SMTP 是发邮件用的 POP3/IMAP 是读邮件用的</p>
<p>至于POP3和IMAP的区别 见网易的一个<a href="http://help.163.com/10/0203/13/5UJONJ4I00753VB8.html?servCode=6010237" target="_blank" rel="external">解释</a> </p>
<p>#发送邮件<br>我们不是要搭建一个邮件服务器 我们只是要在linux上发送邮件<br>也就是说我们要扮演的是个MUA的角色 至于怎么搭建自己的邮件服务器 以后学会了再说现在还是看着挺晕的<br>用到的是系统自带的mailx软件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rpm -qa | grep mailx</div><div class="line">libreport-plugin-mailx-2.0.9-19.el6.centos.x86_64</div><div class="line">mailx-12.4-7.el6.x86_64</div></pre></td></tr></table></figure></p>
<p>他的配置文件在<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/etc/m</span>ail.rc</div></pre></td></tr></table></figure></p>
<p>编辑这个文件<br>加上咱的smtp服务器配置信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> from=pengling@163.com</div><div class="line"><span class="built_in">set</span> smtp=smtp.163.com</div><div class="line"><span class="built_in">set</span> smtp-auth-user=pengling</div><div class="line"><span class="built_in">set</span> smtp-auth-password=111111</div><div class="line"><span class="built_in">set</span> smtp-auth=login</div></pre></td></tr></table></figure></p>
<p>好了配置完了<br>发个邮件试试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> hello word | mailx -v -s <span class="string">'测试邮件'</span> 461921766@qq.com</div></pre></td></tr></table></figure></p>
<p>OK </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近突然想把服务器上的日志 通过邮件发送出去 于是收集整理了一下关于在linux上发送邮件的知识&lt;/p&gt;
&lt;p&gt;#理论基础&lt;/p&gt;
&lt;h2 id=&quot;MUA-MTA-MDA&quot;&gt;&lt;a href=&quot;#MUA-MTA-MDA&quot; class=&quot;headerlink&quot; title=&quot;M
    
    </summary>
    
      <category term="linux" scheme="http://www.pengling.cc/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.pengling.cc/tags/linux/"/>
    
      <category term="mail" scheme="http://www.pengling.cc/tags/mail/"/>
    
  </entry>
  
  <entry>
    <title>my first blog</title>
    <link href="http://www.pengling.cc/2014/09/22/my-first-blog/"/>
    <id>http://www.pengling.cc/2014/09/22/my-first-blog/</id>
    <published>2014-09-22T15:45:11.000Z</published>
    <updated>2017-07-21T00:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>##第一篇博客就从今天开始吧</p>
<p>记录我的学习、生活、工作的思考总结</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##第一篇博客就从今天开始吧&lt;/p&gt;
&lt;p&gt;记录我的学习、生活、工作的思考总结&lt;/p&gt;

    
    </summary>
    
      <category term="其他" scheme="http://www.pengling.cc/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://www.pengling.cc/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
